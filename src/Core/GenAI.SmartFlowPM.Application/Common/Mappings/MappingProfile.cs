using AutoMapper;
using GenAI.SmartFlowPM.Application.DTOs.User;
using GenAI.SmartFlowPM.Application.DTOs.Role;
using GenAI.SmartFlowPM.Application.DTOs.Claim;
using GenAI.SmartFlowPM.Application.DTOs.Project;
using GenAI.SmartFlowPM.Application.DTOs.Task;
using GenAI.SmartFlowPM.Application.DTOs.Tenant;
using GenAI.SmartFlowPM.Application.DTOs.Campaign;
using GenAI.SmartFlowPM.Application.DTOs.Certificate;
using GenAI.SmartFlowPM.Application.DTOs.Team;
using GenAI.SmartFlowPM.Application.DTOs.TimeTracker;
using GenAI.SmartFlowPM.Application.DTOs.Calendar;
using GenAI.SmartFlowPM.Domain.Entities;

namespace GenAI.SmartFlowPM.Application.Common.Mappings;

public class MappingProfile : Profile
{
    public MappingProfile()
    {
        // Tenant mappings
        CreateMap<Tenant, TenantDto>();
        CreateMap<Tenant, TenantSummaryDto>();
        CreateMap<CreateTenantDto, Tenant>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        CreateMap<UpdateTenantDto, Tenant>()
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // User mappings
        CreateMap<User, UserDto>()
            .ForMember(dest => dest.ManagerName, opt => opt.MapFrom(src =>
                src.Manager != null ? $"{src.Manager.FirstName} {src.Manager.LastName}" : null))
            .ForMember(dest => dest.TenantId, opt => opt.MapFrom(src => src.TenantId))
            .ForMember(dest => dest.Roles, opt => opt.MapFrom(src =>
                src.UserRoles.Select(ur => ur.Role.Name).ToList()));

        CreateMap<User, UserSummaryDto>()
            .ForMember(dest => dest.Username, opt => opt.MapFrom(src => src.UserName));

        CreateMap<CreateUserDto, User>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.PasswordHash, opt => opt.Ignore());

        CreateMap<UpdateUserDto, User>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.PasswordHash, opt => opt.Ignore())
            .ForMember(dest => dest.UserName, opt => opt.Ignore());

        // Role mappings
        CreateMap<Role, RoleDto>();
        CreateMap<CreateRoleDto, Role>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        CreateMap<UpdateRoleDto, Role>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // Claim mappings
        CreateMap<Claim, ClaimDto>();
        CreateMap<Claim, ClaimSummaryDto>();
        CreateMap<CreateClaimDto, Claim>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        CreateMap<UpdateClaimDto, Claim>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // Project mappings
        CreateMap<Project, ProjectDto>();
        CreateMap<CreateProjectDto, Project>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        CreateMap<UpdateProjectDto, Project>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // Task mappings
        CreateMap<ProjectTask, TaskDto>()
            .ForMember(dest => dest.ProjectName, opt => opt.MapFrom(src => src.Project.Name))
            .ForMember(dest => dest.AssignedToUserName, opt => opt.MapFrom(src =>
                src.AssignedToUser != null ? $"{src.AssignedToUser.FirstName} {src.AssignedToUser.LastName}" : null))
            .ForMember(dest => dest.ParentTaskTitle, opt => opt.MapFrom(src => src.ParentTask != null ? src.ParentTask.Title : null));

        CreateMap<CreateTaskDto, ProjectTask>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.TaskNumber, opt => opt.Ignore()) // TaskNumber will be generated by CounterService
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.CompletedDate, opt => opt.Ignore())
            .ForMember(dest => dest.ActualHours, opt => opt.Ignore());

        CreateMap<UpdateTaskDto, ProjectTask>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.Acronym, opt => opt.Ignore()) // Acronym cannot be changed after creation
            .ForMember(dest => dest.TaskNumber, opt => opt.Ignore()) // TaskNumber cannot be changed after creation
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.ProjectId, opt => opt.Ignore());

        // Campaign mappings
        CreateMap<Campaign, CampaignDto>()
            .ForMember(dest => dest.AssignedManagers, opt => opt.MapFrom(src => src.GetAssignedManagers()))
            .ForMember(dest => dest.TargetUserIds, opt => opt.MapFrom(src => src.GetTargetUserIds()))
            .ForMember(dest => dest.CreatedByName, opt => opt.MapFrom(src => $"{src.CreatedByUser.FirstName} {src.CreatedByUser.LastName}"));

        CreateMap<CampaignGroup, CampaignGroupDto>()
            .ForMember(dest => dest.TargetUserIds, opt => opt.MapFrom(src => src.GetTargetUserIds()))
            .ForMember(dest => dest.ManagerName, opt => opt.MapFrom(src => $"{src.Manager.FirstName} {src.Manager.LastName}"));

        CreateMap<CampaignEvaluation, CampaignEvaluationDto>();

        // Certificate mappings
        CreateMap<Certificate, CertificateDto>()
            .ForMember(dest => dest.CampaignTitle, opt => opt.MapFrom(src => src.Campaign != null ? src.Campaign.Title : string.Empty))
            .ForMember(dest => dest.RecipientName, opt => opt.MapFrom(src => $"{src.Recipient.FirstName} {src.Recipient.LastName}"))
            .ForMember(dest => dest.IssuerName, opt => opt.MapFrom(src => $"{src.Issuer.FirstName} {src.Issuer.LastName}"));

        CreateMap<CertificateTemplate, CertificateTemplateDto>();

        // Team mappings
        CreateMap<Team, TeamDto>()
            .ForMember(dest => dest.LeaderName, opt => opt.MapFrom(src =>
                src.Leader != null ? $"{src.Leader.FirstName} {src.Leader.LastName}" : null))
            .ForMember(dest => dest.MemberCount, opt => opt.MapFrom(src => src.TeamMembers.Count(tm => tm.IsActive)))
            .ForMember(dest => dest.Members, opt => opt.MapFrom(src => src.TeamMembers.Where(tm => tm.IsActive)));

        CreateMap<CreateTeamDto, Team>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        CreateMap<UpdateTeamDto, Team>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // Team Member mappings
        CreateMap<TeamMember, TeamMemberDto>()
            .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => src.User.UserName))
            .ForMember(dest => dest.UserEmail, opt => opt.MapFrom(src => src.User.Email));

        CreateMap<AddTeamMemberDto, TeamMember>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.JoinedDate, opt => opt.Ignore());

        CreateMap<UpdateTeamMemberDto, TeamMember>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.TeamId, opt => opt.Ignore())
            .ForMember(dest => dest.UserId, opt => opt.Ignore())
            .ForMember(dest => dest.JoinedDate, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // TimeTracker mappings
        // Time Category mappings
        CreateMap<TimeCategory, TimeCategoryDto>();
        CreateMap<CreateTimeCategoryDto, TimeCategory>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => true));

        CreateMap<UpdateTimeCategoryDto, TimeCategory>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // Time Entry mappings
        CreateMap<TimeEntry, TimeEntryDto>()
            .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => 
                src.User != null ? $"{src.User.FirstName} {src.User.LastName}" : string.Empty))
            .ForMember(dest => dest.ProjectName, opt => opt.MapFrom(src => src.Project != null ? src.Project.Name : null))
            .ForMember(dest => dest.TaskName, opt => opt.MapFrom(src => src.Task != null ? src.Task.Title : null))
            .ForMember(dest => dest.TimeCategoryName, opt => opt.MapFrom(src => src.TimeCategory.Name))
            .ForMember(dest => dest.TimeCategoryColor, opt => opt.MapFrom(src => src.TimeCategory.Color));

        CreateMap<CreateTimeEntryDto, TimeEntry>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.UserId, opt => opt.Ignore()) // Will be set from current user
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.Duration, opt => opt.MapFrom(src => 
                src.Duration ?? (src.EndTime.HasValue ? 
                (int)(src.EndTime.Value - src.StartTime).TotalMinutes : 0)))
            .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => true));

        CreateMap<UpdateTimeEntryDto, TimeEntry>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.UserId, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.Duration, opt => opt.MapFrom(src => 
                src.Duration ?? (src.EndTime.HasValue ? 
                (int)(src.EndTime.Value - src.StartTime).TotalMinutes : 0)));

        // Timesheet mappings
        CreateMap<Timesheet, TimesheetDto>()
            .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => 
                src.User != null ? $"{src.User.FirstName} {src.User.LastName}" : string.Empty))
            .ForMember(dest => dest.SubmittedByName, opt => opt.MapFrom(src => 
                src.SubmittedByUser != null ? $"{src.SubmittedByUser.FirstName} {src.SubmittedByUser.LastName}" : null))
            .ForMember(dest => dest.ApprovedByName, opt => opt.MapFrom(src => 
                src.ApprovedByUser != null ? $"{src.ApprovedByUser.FirstName} {src.ApprovedByUser.LastName}" : null))
            .ForMember(dest => dest.RejectedByName, opt => opt.MapFrom(src => 
                src.RejectedByUser != null ? $"{src.RejectedByUser.FirstName} {src.RejectedByUser.LastName}" : null))
            .ForMember(dest => dest.TimeEntries, opt => opt.MapFrom(src => src.TimeEntries));

        CreateMap<CreateTimesheetDto, Timesheet>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => Domain.Enums.TimesheetStatus.Draft));

        CreateMap<UpdateTimesheetDto, Timesheet>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.UserId, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // Active Tracking Session mappings
        CreateMap<ActiveTrackingSession, ActiveTrackingSessionDto>()
            .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => 
                src.User != null ? $"{src.User.FirstName} {src.User.LastName}" : string.Empty))
            .ForMember(dest => dest.ProjectName, opt => opt.MapFrom(src => src.Project != null ? src.Project.Name : null))
            .ForMember(dest => dest.TaskName, opt => opt.MapFrom(src => src.Task != null ? src.Task.Title : null))
            .ForMember(dest => dest.TimeCategoryName, opt => opt.MapFrom(src => src.TimeCategory.Name))
            .ForMember(dest => dest.TimeCategoryColor, opt => opt.MapFrom(src => src.TimeCategory.Color))
            .ForMember(dest => dest.ElapsedMinutes, opt => opt.MapFrom(src => 
                src.Status == Domain.Enums.TrackingStatus.Running ? 
                (int)(DateTime.UtcNow - src.StartTime).TotalMinutes - src.PausedTime : 0));

        CreateMap<StartTrackingDto, ActiveTrackingSession>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.UserId, opt => opt.Ignore()) // Will be set from current user
            .ForMember(dest => dest.StartTime, opt => opt.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.LastActivityTime, opt => opt.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => Domain.Enums.TrackingStatus.Running))
            .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => true))
            .ForMember(dest => dest.PausedTime, opt => opt.MapFrom(src => 0))
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        CreateMap<UpdateTrackingDto, ActiveTrackingSession>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.UserId, opt => opt.Ignore())
            .ForMember(dest => dest.StartTime, opt => opt.Ignore())
            .ForMember(dest => dest.PausedTime, opt => opt.Ignore())
            .ForMember(dest => dest.Status, opt => opt.Ignore())
            .ForMember(dest => dest.IsActive, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());
        
        // Calendar mappings
        // Calendar Event mappings
        CreateMap<CalendarEvent, CalendarEventDto>()
            .ForMember(dest => dest.EventCreatorName, opt => opt.MapFrom(src => 
                src.EventCreator != null ? $"{src.EventCreator.FirstName} {src.EventCreator.LastName}" : null))
            .ForMember(dest => dest.ProjectName, opt => opt.MapFrom(src => src.Project != null ? src.Project.Name : null))
            .ForMember(dest => dest.TaskName, opt => opt.MapFrom(src => src.Task != null ? src.Task.Title : null))
            .ForMember(dest => dest.Attendees, opt => opt.MapFrom(src => src.Attendees))
            .ForMember(dest => dest.Reminders, opt => opt.MapFrom(src => src.Reminders))
            .ForMember(dest => dest.RecurrencePattern, opt => opt.MapFrom(src => src.Recurrence));

        CreateMap<CalendarEvent, CalendarEventSummaryDto>()
            .ForMember(dest => dest.AttendeeCount, opt => opt.MapFrom(src => src.Attendees.Count));

        CreateMap<CreateCalendarEventDto, CalendarEvent>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.EventCreatedBy, opt => opt.Ignore()) // Will be set from current user
            .ForMember(dest => dest.TenantId, opt => opt.Ignore()) // Will be set from current user
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.RecurrencePattern, opt => opt.Ignore()) // JSON serialized
            .ForMember(dest => dest.Attendees, opt => opt.Ignore()) // Mapped separately
            .ForMember(dest => dest.Reminders, opt => opt.Ignore()) // Mapped separately
            .ForMember(dest => dest.Recurrence, opt => opt.Ignore()); // Mapped separately

        CreateMap<UpdateCalendarEventDto, CalendarEvent>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.EventCreatedBy, opt => opt.Ignore())
            .ForMember(dest => dest.TenantId, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.RecurrencePattern, opt => opt.Ignore()); // JSON serialized

        // Event Attendee mappings
        CreateMap<EventAttendee, EventAttendeeDto>()
            .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => 
                src.User != null ? $"{src.User.FirstName} {src.User.LastName}" : string.Empty))
            .ForMember(dest => dest.UserEmail, opt => opt.MapFrom(src => src.User != null ? src.User.Email : string.Empty));

        CreateMap<EventAttendee, EventAttendeeSummaryDto>()
            .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => 
                src.User != null ? $"{src.User.FirstName} {src.User.LastName}" : string.Empty))
            .ForMember(dest => dest.UserEmail, opt => opt.MapFrom(src => src.User != null ? src.User.Email : string.Empty));

        CreateMap<CreateEventAttendeeDto, EventAttendee>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.EventId, opt => opt.Ignore()) // Will be set from context
            .ForMember(dest => dest.TenantId, opt => opt.Ignore()) // Will be set from current user
            .ForMember(dest => dest.Response, opt => opt.MapFrom(src => Domain.Enums.AttendeeResponse.Pending))
            .ForMember(dest => dest.InvitedAt, opt => opt.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        CreateMap<UpdateEventAttendeeDto, EventAttendee>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.EventId, opt => opt.Ignore())
            .ForMember(dest => dest.UserId, opt => opt.Ignore())
            .ForMember(dest => dest.TenantId, opt => opt.Ignore())
            .ForMember(dest => dest.Response, opt => opt.Ignore())
            .ForMember(dest => dest.IsOrganizer, opt => opt.Ignore())
            .ForMember(dest => dest.InvitedAt, opt => opt.Ignore())
            .ForMember(dest => dest.ResponseAt, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // Event Reminder mappings
        CreateMap<EventReminder, EventReminderDto>()
            .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => 
                src.User != null ? $"{src.User.FirstName} {src.User.LastName}" : string.Empty));

        CreateMap<EventReminder, EventReminderSummaryDto>();

        CreateMap<CreateEventReminderDto, EventReminder>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.EventId, opt => opt.Ignore()) // Will be set from context
            .ForMember(dest => dest.TenantId, opt => opt.Ignore()) // Will be set from current user
            .ForMember(dest => dest.IsSent, opt => opt.MapFrom(src => false))
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        CreateMap<UpdateEventReminderDto, EventReminder>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.EventId, opt => opt.Ignore())
            .ForMember(dest => dest.UserId, opt => opt.Ignore())
            .ForMember(dest => dest.TenantId, opt => opt.Ignore())
            .ForMember(dest => dest.IsSent, opt => opt.Ignore())
            .ForMember(dest => dest.SentAt, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // Recurrence Pattern mappings
        CreateMap<RecurrencePattern, RecurrencePatternDto>();

        CreateMap<RecurrencePattern, RecurrencePatternSummaryDto>()
            .ForMember(dest => dest.Description, opt => opt.MapFrom(src => GetRecurrenceDescription(src)));

        CreateMap<CreateRecurrencePatternDto, RecurrencePattern>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.EventId, opt => opt.Ignore()) // Will be set from context
            .ForMember(dest => dest.TenantId, opt => opt.Ignore()) // Will be set from current user
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        CreateMap<UpdateRecurrencePatternDto, RecurrencePattern>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.EventId, opt => opt.Ignore())
            .ForMember(dest => dest.TenantId, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());
    }

    private static string GetRecurrenceDescription(RecurrencePattern pattern)
    {
        return pattern.RecurrenceType switch
        {
            Domain.Enums.RecurrenceType.Daily => $"Every {pattern.Interval} day(s)",
            Domain.Enums.RecurrenceType.Weekly => $"Every {pattern.Interval} week(s)",
            Domain.Enums.RecurrenceType.Monthly => $"Every {pattern.Interval} month(s)",
            Domain.Enums.RecurrenceType.Yearly => $"Every {pattern.Interval} year(s)",
            _ => "Custom recurrence"
        };
    }
}
